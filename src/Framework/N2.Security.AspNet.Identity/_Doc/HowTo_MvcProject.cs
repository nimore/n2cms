
namespace N2.Security.AspNet.Identity
{
    /// <summary>
    /// How to setup an ASP.NET MVC project on N2 Dinamico 
    /// 
    /// The following guide demonstrates how to setup a standard Visual Studio MVC project
    ///     and reuse code, generated by the wizard to build a N2 CMS application. 
    ///     Target audience are advanced developers who want to use 
    ///     the latest Visual Studio generated code in new projects
    ///     or developers that are going to include N2 CMS as part of a larger project.
    /// 
    /// Prerequisites:
    ///     Visual Studio 2013 Update 2 (or newer)
    ///     N2CMS latest version
    ///     
    /// Basic steps: (N2 Dinamico)
    ///  1.Create new ASP.NET MVC Visual Studio 2013 project (Individual User Account)
    ///  2.Remove the Entity Framework packages
    ///    (Note: N2 is based on NHibernate ORM)
    ///    ◦ Uninstall-Package Microsoft.AspNet.Identity.EntityFramework
    ///    ◦ Uninstall-Package EntityFramework
    ///    ◦ Web.config: remove any residual Entity Framework lines
    ///    ◦ Project's bin folder: clean the folder, remove Entity Framework assemblies 
    ///      (EntityFramework.dll, EntityFramework.SqlServer.dll, Microsoft.AspNet.Identity.EntityFramework.dll)
    ///  3.Update NuGet Packages
    /// 	
    ///  5.Add N2 Dinamico to the project
    ///   5.1.N2 Dinamico references
    ///    ◦ using NuGet or manually 
    ///    ◦ N2 assembly references:  
    ///         N2, N2.IoC.Windsor,
    ///         N2.Extensions, 
    ///         N2.Management,  
    ///         N2.Razor, 
    ///         N2.ReusableParts
    ///   5.2.N2 Dinamico resources
    ///       See: N2.Templates.Mvc Dinamico project
    ///    ◦ Copy all assembiles from Dinamico/bin to project's bin folder
    ///    ◦ Copy Dinamico/x86 and x64 to project folder
    ///      (SqLite interop assembiles)
    ///    ◦ Add Dinamico/Dinamico to project folder 
    ///      (by copying content or creating a soft link to Dinamico local repository)
    ///    ◦ Add N2 folder (and it contents)
    ///    ◦ Add App_Data/n2.sqlite.db (with Root and StartPage already defined)
    ///      OR  see pt.8 - configuring N2 database
    ///          configure database of your choice, 
    ///          preload initial contents and remove SqLite assembiles from bin folder.
    ///    ◦ Copy or create ~/Upload folder (make sure it's read-write for N2 web server process)      
    ///    
    ///  6. Add N2.Security.AspNet.Identity library to the project
    ///    ◦ Add reference: N2.Security.AspNet.Identity
    ///      (Note: N2 loads all assembiles, found in bin directory)
    ///               
    ///  7.Setup configuration code
    ///    
    ///   7.0 Models and controllers
    ///      ~/Models/IdentityModels.cs
    ///        ◦ Remove the namespace: Microsoft.AspNet.Identity.EntityFramework
    ///        ◦ class ApplicationUser: Modify it to be extended from N2.Security.AspNet.Identity.ContentUser
    ///          Note: user class is N2 ItemBridge compatible class,
    ///                the class implements IUser and is therefore ASP.NET Identity compatible.
    ///          Note: don't forget to decorate the class with N2 attributes!
    ///          Note: it's no longer required to define Items.User extended class in N2 configuration
    ///                - the subsystem will register ApplicationUser with ItemBridge at start of application.
    ///          Warning: any existing user records should be migrated to ApplicationUser - see N2 Installation.
    ///                see alse N2 documentation (link to be defined !!)
    ///        ◦ class ApplicationDbContext: ORM context is defined by N2 
    ///        
    ///   7.1. ~/App_Start/IdentityConfig.cs
    ///        ◦ Remove the namespace: Microsoft.AspNet.Identity.EntityFramework
    ///        ◦ add ApplicationAccountResources and ApplicationAccountManager classes
    ///        ◦ modify ApplicationUserManager
    ///            to support int UserId type
    ///            configure the manager.
    ///        
    ///   7.2. ~/App_Start/Startup.Auth.cs
    ///        ◦ Remove the namespace: Microsoft.AspNet.Identity.EntityFramework
    ///        ◦ modify OnValidateIdentity to support int UserId type
    ///        ◦ Configure external providers (see ASP.NET documentation).
    ///        
    ///   7.3.~/Controllers/AccountController.cs
    ///        ◦ Remove the namespace: Microsoft.AspNet.Identity.EntityFramework
    ///        ◦ Modify code to support int UserID type
    ///            ConfirmEmail(int userId ..)
    ///            private int GetUserId(...) - new method
    ///            Change all lines marked as errors: User.Identity.GetUserId() -> GetUserId(User.Identity)
    ///        ◦ Fix code to make sure LogOff is available
    ///          <![CDATA[
    ///           /// <summary> Log off current user, with redirection to home </summary>
    ///           /// <remarks> GET and POST log off requests are supported. Anonymous user is just redirected to home. </remarks>
    ///           // MS: POST: /Account/LogOff
    ///           // MS: [HttpPost]
    ///           // MS: [ValidateAntiForgeryToken]
    ///           [AllowAnonymous]
    ///           public ActionResult LogOff()
    ///         ]]>
    ///    
    ///   7.4.Web.config
    ///       add N2 configSections
    ///       add N2 section
    ///       set connectionString
    ///       system.web section:
    ///         authentication mode="None" - classic membership is not configured
    ///         membership, roleManager, profile - should NOT be configured, --""--
    ///         add N2 installer module
    ///       Note:
    ///         checkInstallationStatus="false" - turns off installation procedures.
    ///       Tweaks:
    ///         appSettings
    ///           key="ValidationSettings:UnobtrusiveValidationMode" value="None"
    ///           See also: https://n2cms.codeplex.com/workitem/33883
    ///                     http://connect.microsoft.com/VisualStudio/feedback/details/735928/in-asp-net-web-application-visual-basic-the-requiredfieldvalidator-doest-work
    ///        Fix problem with different Razor versions: runtime > assemblyBinding 
    ///        <![CDATA[
    ///         <dependentAssembly>
    ///           <assemblyIdentity name="System.Web.WebPages.Razor" publicKeyToken="31bf3856ad364e35" />
    ///           <bindingRedirect oldVersion="1.0.0.0-3.0.0.0" newVersion="3.0.0.0" />
    ///         </dependentAssembly>
    ///        ]]>            
    ///   
    ///  8. Configuring N2 database 
    ///    8.1. New database 
    ///         (todo)
    ///    8.2. Upgrading from existing database
    ///     8.2.1.See Web.config connectionStrings section
    ///     8.2.2.Upgrade: admin password
    ///         Note:     Web.config no longer include membership configuration entries,
    ///                   therefore admin password, defined by Web.config is no longer supported.
    ///         Solution: select change-password form in pre-identity application
    ///                   to be sure admin password is stored in database.
    ///     8.2.3.Quick & Dirty User type upgrade example
    ///         (a link to N2 documentation "How to change a ContentItem class name" needed)
    ///         select parentId,id,versionofid,name,title,type from n2item where type like '%User%';
    ///             1|148||TemplateUsers|Users|UserList
    ///           148|149||test|test|User
    ///           148|156||admin|admin|User
    ///         update n2item set type = 'ApplicationUser' where type = 'User';
    /// 
    ///  9. Run N2 CMS
    /// 
    /// 10. MVC tweaks
    ///  10.1. integration
    ///     The problem: Identity 2.0 and Managers
    ///         A manager is created per-request, and disposed after the request.
    ///         Accessing the same manager instance at the next request generates "object disposed" error.
    ///         Conclussion: ApplicationUserManager.Create should return new instance per each request.
    ///     The problem: IoC and UserManager
    ///         N2 controllers are instantiated by IoC.
    ///         AccountController(ApplicationUserManager) constructor is picked by IoC,
    ///         feeding the controller from UserManager, found by IoC.
    ///         UserManager is disposed when controller is disposed.
    ///     The problem: Identity 2.0 and Managers
    ///         User manager dispose method by default disposes underlying storage aswell.
    ///     Solution1: 
    ///         Stick with CreatePerOwinContext pattern - ApplicationUserManager.Create should create
    ///         storage and manager instances, instances are accessed using Owin middleware.
    ///     Solution2: (implemented)
    ///         Modify code to be compatible with IoC. 
    ///         Instances are accessed using IoC dependency. 
    ///         manager and storege instances are singletons,
    ///         controller should not own and dispose manager instance.
    ///         Modifications are in:
    ///         - AccountController.Dispose
    ///         - ApplicationUserManager.Dispose
    ///  10.2. admin login
    ///     The problem: MVC (email/password) login form does not accept non-email like usernames, e.g. "admin"
    ///     Solution: LoginViewModel.Email [EmailAddress] attribute removed
    ///     
    /// </summary>
    internal class HowTo_MvcProject
    {
    }
}
